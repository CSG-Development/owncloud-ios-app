# This file contains the fastlane.tools configuration

# update_fastlane # fastlane automatically update itself

default_platform(:ios)

platform :ios do
  lane :homecloud_noveo_build do |values|
    build_ipa_in_house(
      ENTERPRISE_APP_ID: "com.noveogroup.curator.stxfiles.ios-app",
      ENTERPRISE_APP_PROFILE: "Curator Files :: AdHoc",
      ENTERPRISE_FP_ID: "com.noveogroup.curator.stxfiles.ios-app.file-provider",
      ENTERPRISE_FP_PROFILE: "Curator Files File Provider :: AdHoc",
      ENTERPRISE_FP_UI_ID: "com.noveogroup.curator.stxfiles.ios-app.file-provider-ui",
      ENTERPRISE_FP_UI_PROFILE: "Curator Files File Provider UI :: AdHoc",
      ENTERPRISE_INTENT_ID: "com.noveogroup.curator.stxfiles.ios-app.intents",
      ENTERPRISE_INTENT_PROFILE: "Curator Files Intents :: AdHoc",
      ENTERPRISE_SHARE_EXTENSION_ID: "com.noveogroup.curator.stxfiles.ios-app.share-extension",
      ENTERPRISE_SHARE_EXTENSION_PROFILE: "Curator Files Share Extension :: AdHoc",
      ENTERPRISE_ACTION_EXTENSION_ID: "com.noveogroup.curator.stxfiles.ios-app.action-extension",
      ENTERPRISE_ACTION_EXTENSION_PROFILE: "Curator Files Action Extension :: AdHoc",
      ENTERPRISE_APP_FW_ID: "com.noveogroup.curator.ownCloudApp",
      ENTERPRISE_TEAM: "HVE639V94N",
      ENTERPRISE_IDENTITY: "iPhone Distribution: Noveo Inc. (HVE639V94N)",
      APP_GROUP_IDENTIFIERS: "group.com.noveogroup.curator.stxfiles.ios-app",
      EXPORT_METHOD: "ad-hoc",
      CONFIGURATION: "Release",
      BETA_APP_ICON: false,
      BUILD_NUMBER: values[:BUILD_NUMBER],
      APP_NAME: "curatorFiles",
      URL_SCHEME: "curatorFiles-app",
      IPA_NAME: "curatorFiles-noveo"
    )
  end

  lane :homecloud_seagate_appstore_build do |values|
    build_ipa_in_house(
      ENTERPRISE_APP_ID: "com.seagate.curator.stxfiles.ios-app",
      ENTERPRISE_APP_PROFILE: "Curator Files :: AppStore",
      ENTERPRISE_FP_ID: "com.seagate.curator.stxfiles.ios-app.file-provider",
      ENTERPRISE_FP_PROFILE: "Curator Files File Provider :: AppStore",
      ENTERPRISE_FP_UI_ID: "com.seagate.curator.stxfiles.ios-app.file-provider-ui",
      ENTERPRISE_FP_UI_PROFILE: "Curator Files File Provider UI :: AppStore",
      ENTERPRISE_INTENT_ID: "com.seagate.curator.stxfiles.ios-app.intents",
      ENTERPRISE_INTENT_PROFILE: "Curator Files Intents :: AppStore",
      ENTERPRISE_SHARE_EXTENSION_ID: "com.seagate.curator.stxfiles.ios-app.share-extension",
      ENTERPRISE_SHARE_EXTENSION_PROFILE: "Curator Files Share Extension :: AppStore",
      ENTERPRISE_ACTION_EXTENSION_ID: "com.seagate.curator.stxfiles.ios-app.action-extension",
      ENTERPRISE_ACTION_EXTENSION_PROFILE: "Curator Files Action Extension :: AppStore",
      ENTERPRISE_APP_FW_ID: "com.seagate.curator.stxfiles-app",
      ENTERPRISE_TEAM: "57HJ3KH2XC",
      ENTERPRISE_IDENTITY: "Apple Distribution: Seagate Technologies LLC (57HJ3KH2XC)",
      APP_GROUP_IDENTIFIERS: "group.com.seagate.curator.stxfiles",
      EXPORT_METHOD: "app-store",
      CONFIGURATION: "Release",
      BETA_APP_ICON: false,
      BUILD_NUMBER: values[:BUILD_NUMBER],
      APP_NAME: "curatorFiles",
      URL_SCHEME: "curatorFiles-app",
      IPA_NAME: "curatorFiles-appStore"
    )
  end

  lane :generate_appicon do
    iconPath = "ownCloud/Resources/Theming/branding-assets/"
    iconName = "branding-icon.png"  
    outputIconPath = "../ownCloud/Resources/Assets.xcassets/"
    outputIconName = "AppIcon.appiconset"
    if File.exist?("../" + iconPath + iconName)
      sh("rm -rf " + outputIconPath + outputIconName + "/*")
      appicon(
        appicon_image_file: iconPath + iconName,
        appicon_devices: [:ipad, :iphone, :ios_marketing],
        appicon_path: "ownCloud/Resources/Assets.xcassets/",
        appicon_name: outputIconName
      )
    end
  end

  def upload_ipa(ipa_path, apple_id, key_id, issuer_id, key_filepath)
    api_key = app_store_connect_api_key(
      key_id: key_id,                     
      issuer_id: issuer_id,
      filepath: key_filepath,
      duration: 1200,
      in_house: false
    )

    upload_to_testflight(
        api_key: api_key,
        ipa: ipa_path,
        skip_submission: true,
        skip_waiting_for_build_processing: ENV["should_skip_processing"] || true,
        apple_id: apple_id
    )
  end

  lane :upload_build do |options|
      ipa_path=options[:ipa_path]
      apple_id=options[:apple_id]
      key_id=options[:key_id]
      issuer_id=options[:issuer_id]
      key_filepath=options[:key_filepath]
      upload_ipa(ipa_path, apple_id, key_id, issuer_id, key_filepath)
  end

  desc "In-House Enterprise IPA generation"
   lane :build_ipa_in_house do |values|

    ENTERPRISE_APP_ID = values[:ENTERPRISE_APP_ID]
    ENTERPRISE_APP_PROFILE = values[:ENTERPRISE_APP_PROFILE]
    ENTERPRISE_FP_ID = values[:ENTERPRISE_FP_ID]
    ENTERPRISE_FP_PROFILE = values[:ENTERPRISE_FP_PROFILE]
    ENTERPRISE_FP_UI_ID = values[:ENTERPRISE_FP_UI_ID]
    ENTERPRISE_FP_UI_PROFILE = values[:ENTERPRISE_FP_UI_PROFILE]
    ENTERPRISE_INTENT_ID = values[:ENTERPRISE_INTENT_ID]
    ENTERPRISE_INTENT_PROFILE = values[:ENTERPRISE_INTENT_PROFILE]
    ENTERPRISE_SHARE_EXTENSION_ID = values[:ENTERPRISE_SHARE_EXTENSION_ID]
    ENTERPRISE_SHARE_EXTENSION_PROFILE = values[:ENTERPRISE_SHARE_EXTENSION_PROFILE]
    ENTERPRISE_ACTION_EXTENSION_ID = values[:ENTERPRISE_ACTION_EXTENSION_ID]
    ENTERPRISE_ACTION_EXTENSION_PROFILE = values[:ENTERPRISE_ACTION_EXTENSION_PROFILE]
    ENTERPRISE_APP_FW_ID = values[:ENTERPRISE_APP_FW_ID]
    ENTERPRISE_APP_SHARED_ID = "com.seagate.curator.ownCloudAppShared"
    ENTERPRISE_HC_APP_SHARED_ID = "com.seagate.curator.homeCloudAppShared"
    ENTERPRISE_TEAM = values[:ENTERPRISE_TEAM]
    ENTERPRISE_IDENTITY = values[:ENTERPRISE_IDENTITY]
    APP_GROUP_IDENTIFIERS = values[:APP_GROUP_IDENTIFIERS]
    OC_APP_GROUP_IDENTIFIERS = values[:APP_GROUP_IDENTIFIERS]
    EXPORT_METHOD = values[:EXPORT_METHOD]
    CONFIGURATION = values[:CONFIGURATION]
    BUILD_NUMBER = values[:BUILD_NUMBER]

    # Check if Xcode version matches the required (as in .xcode-version defined)
    xcode_version_paths = "../.xcode-version"
    if File.exist?(xcode_version_paths)
      required_version = File.read(xcode_version_paths).strip
      puts "Found required Xcode version: " + required_version
      ensure_xcode_version(version: required_version)
    end

    appName = "ownCloud"
    appBuildFlags = ""
    appCustomAppScheme = ""
    appCustomAuthScheme = ""
    themeFolder = "ownCloud/Resources/Theming/"
    themePath = themeFolder + "Branding.plist"
    if !values[:APP_NAME].nil?
      appName = values[:APP_NAME]
    elsif File.exist?("../" + themePath)
      tmpAppName = get_info_plist_value(path: themePath, key: "branding.organization-name")
      if tmpAppName && !tmpAppName.empty?
        appName = tmpAppName
      end
    end

    gitbranch = sh "git rev-parse --abbrev-ref HEAD"
    sdkgitbranch = sh "git -C ../ios-sdk/ rev-parse --abbrev-ref HEAD"
    puts "App Git Branch: " + gitbranch
    puts "SDK Git Branch: " + sdkgitbranch
    if File.exist?("../" + themePath)
      # Extract from Branding.plist
      tmpAppBuildFlags = get_info_plist_value(path: themePath, key: "build.flags")
      if tmpAppBuildFlags && !tmpAppBuildFlags.empty?
        appBuildFlags = tmpAppBuildFlags
      end

      tmpAppCustomAppScheme = get_info_plist_value(path: themePath, key: "build.custom-app-scheme")
      if tmpAppCustomAppScheme && !tmpAppCustomAppScheme.empty?
        appCustomAppScheme = tmpAppCustomAppScheme
      end

      tmpAuthCustomAuthScheme = get_info_plist_value(path: themePath, key: "build.custom-auth-scheme")
      if tmpAuthCustomAuthScheme && !tmpAuthCustomAuthScheme.empty?
        appCustomAuthScheme = tmpAuthCustomAuthScheme
      end

      # Fallback (legacy key name support)
      tmpAppBuildFlags = get_info_plist_value(path: themePath, key: "app.build-flags")
      if tmpAppBuildFlags && !tmpAppBuildFlags.empty?
        appBuildFlags = tmpAppBuildFlags
      end

      tmpAppCustomAppScheme = get_info_plist_value(path: themePath, key: "app.custom-app-scheme")
      if tmpAppCustomAppScheme && !tmpAppCustomAppScheme.empty?
        appCustomAppScheme = tmpAppCustomAppScheme
      end

      tmpAuthCustomAuthScheme = get_info_plist_value(path: themePath, key: "app.custom-auth-scheme")
      if tmpAuthCustomAuthScheme && !tmpAuthCustomAuthScheme.empty?
        appCustomAuthScheme = tmpAuthCustomAuthScheme
      end

      # Set the Git commit hash for the ios-app and ios-sdk repository into the Branding.plist
      commit = sh "git rev-parse --short HEAD"
      sdkcommit = sh "git -C ../ios-sdk/ rev-parse --short HEAD"

      puts "App Git Hash: " + commit
      puts "SDK Git Hash: " + sdkcommit
      set_info_plist_value(path: themePath, key: "GitHash", value: commit)
      set_info_plist_value(path: themePath, key: "SDKGitHash", value: sdkcommit)
      set_info_plist_value(path: themePath, key: "GitBranch", value: gitbranch)
      set_info_plist_value(path: themePath, key: "SDKGitBranch", value: sdkgitbranch)
    end

    puts "App Name: " + appName
    puts "App Build Flags: " + appBuildFlags
    puts "Custom App Scheme: " + appCustomAppScheme
    puts "Custom Auth Scheme: " + appCustomAuthScheme

    # Special handling for app build flag DISABLE_BACKGROUND_LOCATION needed:
    # calls to set_info_plist_value before building with xcodebuild
    # strip preprocessor instructions from Info.plist, so that the
    # Location keys they aim to remove stay in place. Working around this
    # by removing anything between "#ifndef DISABLE_BACKGROUND_LOCATION"
    # and "#endif" via sed
    if appBuildFlags.include? "DISABLE_BACKGROUND_LOCATION"
        sh "sed '/#ifndef DISABLE_BACKGROUND_LOCATION/,/#endif/d' ../ownCloud/Resources/Info.plist >../ownCloud/Resources/Info.plist.mod"
        sh "mv ../ownCloud/Resources/Info.plist.mod ../ownCloud/Resources/Info.plist"
    end

    # Special handling for app build flag DISABLE_PLAIN_HTTP (see above why this is needed)
    if appBuildFlags.include? "DISABLE_PLAIN_HTTP"
        sh "sed '/#ifndef DISABLE_PLAIN_HTTP/,/#endif/d' ../ownCloud/Resources/Info.plist >../ownCloud/Resources/Info.plist.mod"
        sh "mv ../ownCloud/Resources/Info.plist.mod ../ownCloud/Resources/Info.plist"
    end

	# update_url_schemes can't seem to reach the second URL scheme ("oc") for authentication
	# so using sed and a XML property instead
    if !appCustomAppScheme.empty?
        sh 'sed "s#<string octype=\"app\">owncloud</string>#<string>' + appCustomAppScheme + '</string>#" ../ownCloud/Resources/Info.plist >../ownCloud/Resources/Info.plist.mod'
        sh "mv ../ownCloud/Resources/Info.plist.mod ../ownCloud/Resources/Info.plist"
    end

    if !appCustomAuthScheme.empty?
        sh 'sed "s#<string octype=\"auth\">oc</string>#<string>' + appCustomAuthScheme + '</string>#" ../ownCloud/Resources/Info.plist >../ownCloud/Resources/Info.plist.mod'
        sh "mv ../ownCloud/Resources/Info.plist.mod ../ownCloud/Resources/Info.plist"
    end

    set_info_plist_value(path: "ownCloud/Resources/Info.plist", key: "CFBundleDisplayName", value: appName)
    set_info_plist_value(path: "ownCloud/Resources/Info.plist", key: "CFBundleName", value: appName)

    # Check, if Branding.plist file exists and handle custom set values
    if File.exist?("../" + themePath)
      # Check for custom app version number
        tmpCustomAppVersionNumber = get_info_plist_value(path: themePath, key: "build.version-number")
        if tmpCustomAppVersionNumber && !tmpCustomAppVersionNumber.empty?
          customAppVersionNumber = tmpCustomAppVersionNumber

          puts "Set Version Number from Branding.plist: " + customAppVersionNumber
          set_info_plist_value(path: "ownCloud/Resources/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "ownCloud File Provider/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "ownCloud File Provider UI/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "ownCloud Share Extension/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "ownCloud Action Extension/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
          set_info_plist_value(path: "ownCloud Intents/Info.plist", key: "CFBundleShortVersionString", value: customAppVersionNumber)
        end

        # Check for custom app group identifier
        tmpAPP_GROUP_IDENTIFIERS = get_info_plist_value(path: themePath, key: "build.app-group-identifier")
        if tmpAPP_GROUP_IDENTIFIERS && !tmpAPP_GROUP_IDENTIFIERS.empty?
          APP_GROUP_IDENTIFIERS = tmpAPP_GROUP_IDENTIFIERS
          OC_APP_GROUP_IDENTIFIERS = tmpAPP_GROUP_IDENTIFIERS
        end

        # Check for custom OC app group identifier
        tmpOC_APP_GROUP_IDENTIFIERS = get_info_plist_value(path: themePath, key: "build.oc-app-group-identifier")
        if tmpOC_APP_GROUP_IDENTIFIERS && !tmpOC_APP_GROUP_IDENTIFIERS.empty?
          OC_APP_GROUP_IDENTIFIERS = tmpOC_APP_GROUP_IDENTIFIERS
        end
    end

    if !values[:BUILD_NUMBER].nil?
      puts "Set Drone Build Number: " + BUILD_NUMBER
      set_info_plist_value(path: "ownCloud/Resources/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "ownCloud File Provider/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "ownCloud File Provider UI/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "ownCloud Share Extension/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "ownCloud Action Extension/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
      set_info_plist_value(path: "ownCloud Intents/Info.plist", key: "CFBundleVersion", value: BUILD_NUMBER)
    end

    if !values[:URL_SCHEME].nil?
      update_url_schemes(
        path: "ownCloud/Resources/Info.plist",
        update_url_schemes: proc do |schemes|
          schemes + [values[:URL_SCHEME]]
        end
      )
    end

    set_info_plist_value(path: "ownCloud File Provider/Info.plist", key: "CFBundleDisplayName", value: appName)
    set_info_plist_value(path: "ownCloud File Provider/Info.plist", key: "CFBundleName", value: appName)

    set_info_plist_value(path: "ownCloud File Provider UI/Info.plist", key: "CFBundleDisplayName", value: appName)
    set_info_plist_value(path: "ownCloud File Provider UI/Info.plist", key: "CFBundleName", value: appName)

    set_info_plist_value(path: "ownCloud Share Extension/Info.plist", key: "CFBundleDisplayName", value: "Share to " + appName)
    set_info_plist_value(path: "ownCloud Share Extension/Info.plist", key: "CFBundleName", value: appName)

    set_info_plist_value(path: "ownCloud Action Extension/Info.plist", key: "CFBundleDisplayName", value: "Save to " + appName)
    set_info_plist_value(path: "ownCloud Action Extension/Info.plist", key: "CFBundleName", value: appName)
    
    # Read InfoPlist.xcstrings JSON content from the file
    json_file_path = "../ownCloud Action Extension/InfoPlist.xcstrings"
    json_content = File.read(json_file_path)
    json_data = JSON.parse(json_content)
    
    # Update the CFBundleDisplayName value for all localizations
    if json_data["strings"] && json_data["strings"]["CFBundleDisplayName"]
        UI.message("CFBundleDisplayName key found, updating values...")
        
        json_data["strings"]["CFBundleDisplayName"]["localizations"].each do |locale, localization_data|
          old_value = localization_data["stringUnit"]["value"]
          
          # Replace "ownCloud" with appName
          new_value = old_value.gsub("ownCloud", appName)
          localization_data["stringUnit"]["value"] = new_value
        end
      else
        UI.error("CFBundleDisplayName key not found in the JSON data!")
      end
    
    # Write the updated JSON back to the file
    File.open(json_file_path, "w") do |f|
      f.write(JSON.pretty_generate(json_data))
    end

    update_app_identifier(
      xcodeproj: "ownCloud.xcodeproj",
      plist_path: "ownCloud/Resources/Info.plist",
      app_identifier: ENTERPRISE_APP_ID
    )

    update_app_identifier(
      xcodeproj: "ownCloud.xcodeproj",
      plist_path: "ownCloud File Provider/Info.plist",
      app_identifier: ENTERPRISE_FP_ID
    )

    update_app_identifier(
      xcodeproj: "ownCloud.xcodeproj",
      plist_path: "ownCloud File Provider UI/Info.plist",
      app_identifier: ENTERPRISE_FP_UI_ID
    )

    update_app_identifier(
      xcodeproj: "ownCloud.xcodeproj",
      plist_path: "ownCloudAppFramework/Resources/Info.plist",
      app_identifier: ENTERPRISE_APP_FW_ID
    )

    update_app_identifier(
      xcodeproj: "ownCloud.xcodeproj",
      plist_path: "ownCloud Intents/Info.plist",
      app_identifier: ENTERPRISE_INTENT_ID
    )

    update_app_identifier(
      xcodeproj: "ownCloud.xcodeproj",
      plist_path: "ownCloud Share Extension/Info.plist",
      app_identifier: ENTERPRISE_SHARE_EXTENSION_ID
    )

    update_app_identifier(
      xcodeproj: "ownCloud.xcodeproj",
      plist_path: "ownCloud Action Extension/Info.plist",
      app_identifier: ENTERPRISE_ACTION_EXTENSION_ID
    )

    update_app_group_identifiers(
      entitlements_file: "ownCloud/ownCloud.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "ownCloud/ownCloud.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	  )

    update_app_group_identifiers(
      entitlements_file: "ownCloud File Provider/ownCloud_File_Provider.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "ownCloud File Provider/ownCloud_File_Provider.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	  )

    update_app_group_identifiers(
      entitlements_file: "ownCloud File Provider UI/ownCloud_File_Provider_UI.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "ownCloud File Provider UI/ownCloud_File_Provider_UI.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	  )

    update_app_group_identifiers(
      entitlements_file: "ownCloud Intents/ownCloud Intents.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "ownCloud Intents/ownCloud Intents.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	  )

    update_app_group_identifiers(
      entitlements_file: "ownCloud Share Extension/ownCloud Share Extension.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "ownCloud Share Extension/ownCloud Share Extension.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	  )

    update_app_group_identifiers(
      entitlements_file: "ownCloud Action Extension/ownCloud Action Extension.entitlements",
      app_group_identifiers: [APP_GROUP_IDENTIFIERS]
    )
    update_keychain_access_groups(
      entitlements_file: "ownCloud Action Extension/ownCloud Action Extension.entitlements",
      identifiers: [ENTERPRISE_TEAM + "." + APP_GROUP_IDENTIFIERS]
	  )

    set_info_plist_value(path: "ownCloud File Provider/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud File Provider/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud File Provider/Info.plist", key: "NSExtension", subkey: "NSExtensionFileProviderDocumentGroup", value: APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud File Provider UI/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud File Provider UI/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud Intents/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud Intents/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud Share Extension/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud Share Extension/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud Action Extension/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud Action Extension/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud/Resources/Info.plist", key: "OCAppGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)
    set_info_plist_value(path: "ownCloud/Resources/Info.plist", key: "OCKeychainAccessGroupIdentifier", value: OC_APP_GROUP_IDENTIFIERS)

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_APP_PROFILE,
      bundle_identifier: ENTERPRISE_APP_ID,
      targets: ["ownCloud"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_FP_PROFILE,
      bundle_identifier: ENTERPRISE_FP_ID,
      targets: ["ownCloud File Provider"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_FP_UI_PROFILE,
      bundle_identifier: ENTERPRISE_FP_UI_ID,
      targets: ["ownCloud File Provider UI"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_INTENT_PROFILE,
      bundle_identifier: ENTERPRISE_INTENT_ID,
      targets: ["ownCloud Intents"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      bundle_identifier: ENTERPRISE_APP_FW_ID,
      targets: ["ownCloudApp"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_SHARE_EXTENSION_PROFILE,
      bundle_identifier: ENTERPRISE_SHARE_EXTENSION_ID,
      targets: ["ownCloud Share Extension"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      profile_name: ENTERPRISE_ACTION_EXTENSION_PROFILE,
      bundle_identifier: ENTERPRISE_ACTION_EXTENSION_ID,
      targets: ["ownCloud Action Extension"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      bundle_identifier: ENTERPRISE_APP_SHARED_ID,
      targets: ["ownCloudAppShared"]
    )

    automatic_code_signing(
      path: "ownCloud.xcodeproj",
      use_automatic_signing: false,
      team_id: ENTERPRISE_TEAM,
      code_sign_identity: ENTERPRISE_IDENTITY,
      bundle_identifier: ENTERPRISE_HC_APP_SHARED_ID,
      targets: ["homeCloudAppShared"]
    )

    # Add a badge with the latest short commit hash to the app icon
    build_number = app_version(
      xcodeproj: "ownCloud.xcodeproj",
      version_key: "APP_VERSION"
    )

    version = app_version(
      xcodeproj: "ownCloud.xcodeproj",
      version_key: "APP_SHORT_VERSION"
    )


      time = Time.now
      ipaSuffix = EXPORT_METHOD + "-" + time.strftime("%Y%m%d-%H%M")
      if !customAppVersionNumber.nil?
        version = customAppVersionNumber
      end
      if !values[:BUILD_NUMBER].nil?
        version += "." + BUILD_NUMBER
      end

      if !values[:IPA_NAME].nil?
        ipaName = values[:IPA_NAME] + "-" + version + "-" + gitbranch.strip + "-" + ipaSuffix + ".ipa"
      elsif
        ipaName = appName + "-" + version + "-" + ipaSuffix + ".ipa"
      end

      if File.exist?("../" + themePath)
        # Copy the Branding.plist file with additional app and build informtion in the file name
        sh "cp " + "\"../" + themePath + "\" \"../" + themeFolder + appName + "-" + version + "-" + ipaSuffix + ".plist\""
      end

    generate_appicon()

    if values[:BETA_APP_ICON]
      commit = last_git_commit
      short_hash = commit[:abbreviated_commit_hash] # short sha of commit
      sh "brew install librsvg"
      sh "sed -e \"s/\#version#/" + version + "/\" -e \"s/\#githash#/" + short_hash + "/\" badge.svg > badge_tmp.svg"
      sh "rsvg-convert badge_tmp.svg > badge.png"
      add_badge(custom: "fastlane/badge.png")
    end

    #Create the build
    build_app(
      project: "ownCloud.xcodeproj",
      scheme: "ownCloud",
      configuration: CONFIGURATION,
      codesigning_identity: ENTERPRISE_IDENTITY,
      output_name: ipaName,
      output_directory: "./.build",
      export_method: EXPORT_METHOD,
      xcargs: "CODE_SIGN_STYLE=Manual APP_BUILD_FLAGS='" + appBuildFlags + "'",
      export_options: {
        method: EXPORT_METHOD,
        provisioningProfiles: {
          ENTERPRISE_APP_ID => ENTERPRISE_APP_PROFILE,
	        ENTERPRISE_FP_ID => ENTERPRISE_FP_PROFILE,
	        ENTERPRISE_INTENT_ID => ENTERPRISE_INTENT_PROFILE,
	        ENTERPRISE_SHARE_EXTENSION_ID => ENTERPRISE_SHARE_EXTENSION_PROFILE,
	        ENTERPRISE_ACTION_EXTENSION_ID => ENTERPRISE_ACTION_EXTENSION_PROFILE
        }
      }
    )
    
    
    
    if appBuildFlags.include? "REMOVE_EXTENSION_INTENTS"
        sh "../removeExtension.sh \"../" + ipaName.gsub("/", "_") + "\" \"ownCloud Intents\""
    end

  end
end
